**# DOM SLC/HLC Linear Fit Chi Squared Statistic**

Contact:	Dawn Willaims drwilliams3@ua.edu


**## Variable Names**

In the current code, variable names are
- *cut_chi*
- *cut_time*
- *fit_length*
- *max_fit_length*
  
**## Motivation**  
When looking at the Chi Squared statistic of the SLC/HLC Linear fits, we 
occasionally see extreme outliers in the chi squared, meaning the goodness 
of the HLC/SLC fit was extremely poor. So, we've developed this monitoring 
code to detect these outliers and eliminate them from our data measurements.

**## Data Provenance**

dom moni stream → StringHub → moniBuilder → I3Live → reduced chi squared → Visualization

**## Data Aggregation**

doms: The DOM FPGA counts SPE and MPE hits in separate scalers. They are read out 
periodically at configurable interval by DOMApp and buffered in the monitoring event 
stream ("hardware monitoring events") inside the DOM.

pdaq: StringHub polls DOMs for buffered hardware monitoring events. Data is sent to 
the monitoring thread of the SecondaryBuilders component which must sum the counts 
for each DOM over intervals of ten minutes. At the end of each interval, a JSON map 
of '(string, DOM)' to integer counts should be sent to Live.

**## Comments**

DOM SLC/HLC Linear Fit Chi-Squared Statistic

This page shows monitoring of the reduced chi-squared statistic derived 
from the SLC/HLC linear fit for each DOM over time. The plots display the 
chi-squared values against time, with a linear regression and associated 
error bounds overlaid to highlight long-term trends.

The purpose of this monitoring is to identify abnormal behavior in the fits. 
While most DOMs produce chi-squared values within expected ranges, extreme 
outliers (on the order of 15–20σ from the mean) can occur, indicating a very 
poor fit. Such outliers are flagged and removed to ensure data quality. In 
addition, sudden jumps linked to DOMCal transitions are also highlighted. 
Overall, this page provides a high-level view of fit quality across DOMs, 
helping maintain reliable data for IceCube analyses.

In order to contruct the graphs, the live code should pull data from either ~90 days of 
data collection, or back to last time a DomCal transition jump occured.

**## JSON Example**  
```json
{
    "_id": "64b734bf4f2e0b",
    "service": "PFMoniWriter",
    "varname": "ITSLCChargeCalResults",
    "value": {
        "channel": 0,
        "chip": 0,
        "string": 1,
        "om": 61,
        "recordingStartTime": "2023-07-18 22:53:08.506691192",
        "recordingStopTime": "2023-07-19 00:53:23.548041703",
        "result": {
            "chi2": 368.2693826230243,
            "p0": 0.9018154733956386,
            "p0_error": 0.03748806171299918,
            "p1": 1.010182914850287,
            "p1_error": 0.0007504576123384945,
            "n": 1218,
            "sum_x": 55199.20000000003,
            "sum_xx": 3039351.480000003,
            "sum_xy": 3120080.429999998,
            "sum_y": 56859.69999999988,
            "sum_yy": 3203497.169999993
        },
        "runNumber": 138165,
        "subrunNumber": 0,
        "version": 0
    },
    "prio": 3,
    "time": "2023-07-19 00:56:30.851000",
    "insert_time": "2023-07-19 10:43:54.677408"
}
```

**## Tests**  
Test will be the standard linear regression tests.

